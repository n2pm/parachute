plugins {
    id "fabric-loom" version "1.2-SNAPSHOT"
    id "org.ajoberstar.grgit" version "4.1.0"
    id "com.modrinth.minotaur" version "2.+"
    id "maven-publish"
}

version = "${project.mod_version}${getVersionMetadata()}"
version = project.version
group = project.maven_group

def build_release = System.getenv("BUILD_RELEASE") == "true"
def build_ci_commit = System.getenv("SHA")

version = project.mod_version + ""

if (!build_release) {
    version = project.mod_version + "+" + new Date().format("yyyyMMdd.HHmmss")
}

if (build_ci_commit != null) {
    version = project.mod_version + "+${build_ci_commit}"
}

repositories {
    maven { url "https://masa.dy.fi/maven" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.gegy.dev/" }
    maven { url "https://maven.svc.adryd.com/releases/" }
    maven { url "https://notnite.github.io/blockbuild/mvn/" }
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    implementation "com.github.bbottema:jetbrains-runtime-annotations:1.0.1"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi include("com.adryd:cauldron:${project.cauldron_version}")
    modApi include("fi.dy.masa.malilib:kosmolot-unofficial-malilib-fabric-1.20:${project.malilib_version}")
}

loom {
    accessWidenerPath = file("src/main/resources/parachute.accesswidener")
}

processResources {
    inputs.property "version", version

    filesMatching("fabric.mod.json") {
        expand project.properties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

modrinth {
    syncBodyFrom = rootProject.file("README.md").text
    changelog = rootProject.file("CHANGELOG.md").text
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "parachute"
    versionType = (System.getenv("BUILD_RELEASE") == "true") ? "release" : "beta"
    uploadFile = remapJar
    gameVersions = ["1.20"]
    loaders = ["fabric", "quilt"]
    dependencies {
        required.project "fabric-api"
        optional.project "modmenu"
    }
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

def getVersionMetadata() {
    def release = System.getenv("BUILD_RELEASE") == "true"
    def build_ci_branch = System.getenv("CI_COMMIT_BRANCH")

    if (release) {
        return ""
    }

    if (grgit != null && grgit.status().clean) {
        // 8 chars long to match GitLab's commit IDs
        def id = grgit.head().id[[0..7]]
        def branch = grgit.branch.current().name

        if (branch == "main" || build_ci_branch == "main") {
            return "+" + id
        }

        return "+" + branch + "." + id
    }

    return "+SNAPSHOT"
}
